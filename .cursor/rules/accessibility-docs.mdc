---
description: Revision, creation and modification of accessibility documentation files
globs: 
alwaysApply: false
---
# Accessibility Documentation Rules

## Purpose and Scope

The accessibility documentation should:
- Focus on how OUR components implement and handle accessibility
- Document built-in/automatic accessibility features
- Explain component-specific configuration options
- Provide practical usage examples specific to our components

The documentation should NOT:
- Explain general ARIA concepts or accessibility guidelines
- Provide general education about what roles or attributes mean
- Include generic accessibility best practices not specific to our components

## Before Starting

1. Ask for any specific requirements or notes for the component
2. Review existing JIRA task notes for additional context
3. Check if component has special accessibility considerations

## File Structure and Location

- Accessibility documentation files should be named `03-accessibility.mdx`
- Files should be placed in `docs/src/documentation/03-components/<component-name>/`
- Component source code is in `packages/orbit-components/src/<component-name>/`
- Component README files are located next to component source code

## File Format and Structure

### Required Frontmatter

```mdx
---
title: Accessibility
redirect_from:
  - /components/<component-name>/accessibility/
---
```

### Document Structure

#### Required Section Names

Documentation must use these exact section names and structure:

1. Main heading and introduction:
```mdx
## Accessibility

The [ComponentName] component has been designed with accessibility in mind.
```

2. For multiple components:
```mdx
## Accessibility

### ComponentOne
The ComponentOne component has been designed with accessibility in mind.
[ComponentOne documentation...]

### ComponentTwo
The ComponentTwo component has been designed with accessibility in mind.
[ComponentTwo documentation...]
```

3. Props documentation:
```mdx
#### Accessibility Props

| Name | Type | Description |
| :--- | :--- | :---------- |
```

4. For components with multiple elements:
```mdx
#### Accessibility Props

**Input field props:**

| Name | Type | Description |
| :--- | :--- | :---------- |
| ariaLabel | string | Specifies aria-label for the input field |

**Button props:**

| Name | Type | Description |
| :--- | :--- | :---------- |
| titleDecrement | string | Specifies aria-label for the decrement button |
```

5. Best practices (if applicable):
```mdx
#### Best practices

- Guideline 1
- Guideline 2
```

6. Code examples and screen reader behavior:
```mdx
#### Examples

Basic usage:
```jsx
<Component />
```

Screen reader announces: "Component description"

With ARIA labels:
```jsx
<Component ariaLabel="Custom label" />
```

Screen reader announces: "Custom label"
```

### Content Requirements

#### Accessibility Props

- Document all accessibility-related props:
  - Standard aria-* props specific to the component
  - Other accessibility attributes (role, disabled, tabIndex, etc.)
  - Native HTML attributes that affect accessibility
- Document if component accepts all aria-* and data-* props (exceptional cases)
- Include prop descriptions in the component's props table if missing

#### Automatic Accessibility Features

- Document any automatically handled accessibility features:
  - Focus management (e.g., Modal/Drawer auto-focusing first element)
  - Internal ARIA attributes (e.g., aria-controls, aria-expanded)
  - Keyboard navigation handling
  - Screen reader announcements
- Explain when and how these automatic features work
- Note any conditions or props that might affect automatic behavior

#### Screen Reader Behavior

- Document how screen readers announce the component
- Provide examples with different prop combinations
- Validate and correct any claims about screen reader announcements

#### Special Cases

- Document asComponent prop if available
- For components using icons, reference the Icon component's accessibility documentation
- Specify when certain aria props are required vs optional

### Storybook Integration

1. Review and validate aria-related props in stories
2. Exclude inappropriate aria props from stories
3. Add excluded props to the appropriate exclusion array if needed

### Quality Checks

- Ensure all documented props exist and are correctly typed
- Validate screen reader behavior claims
- Cross-reference with existing accessibility docs for consistency
- Remove outdated or incorrect accessibility information from other locations

### Example Documentation

Each component documentation should include:

1. Basic usage examples
2. Screen reader announcement examples
3. Common use cases with accessibility considerations
4. Edge cases and their proper handling
5. Component composition examples:
   - How to maintain accessibility when components are used together
   - Best practices for common combinations (e.g., InputField inside InputGroup)
   - How ARIA attributes and roles interact between nested components
   - Screen reader behavior in component combinations

## Writing Style Guidelines

1. Use clear, concise language
2. Focus on practical implementation
3. Always include screen reader behavior descriptions
4. Use consistent terminology across all documentation
5. Provide context for why certain accessibility features are important
6. Use proper markdown formatting for code blocks and tables
7. Keep examples focused and relevant
8. Include translations considerations where applicable

## Documentation Guidelines

### General Rules

1. All accessibility documentation should be moved from README.md to the dedicated accessibility file
2. No accessibility sections should remain in README.md files
3. Each component must have its own accessibility documentation page
4. Documentation must be created only after explicit approval for each component

### README.md Updates

When creating accessibility documentation:
1. Review and update the props table in README.md:
   - Add any missing accessibility-related props
   - Correct any inaccurate prop descriptions
   - Ensure prop types are correct
   - Fix any typos or formatting issues
   - Ensure kebab-case is used for aria-* props
   - Check that all props match the actual implementation
   - Verify default values are correctly documented
2. Remove any accessibility-related content
3. Add a link to the new accessibility documentation

Example of props table corrections:
```diff
| Name | Type | Default | Description |
| :-- | :-- | :-- | :-- |
- | ariaLabel | string | - | Label for screen readers
+ | aria-label | string | - | Specifies the accessible name of the element
- | ariaCurrent | string | false | Indicates current item
+ | aria-current | string | - | Indicates whether element represents current item within a set
```

### Content Validation

1. Document all accessibility-related props:
   - Standard aria props specific to the component
   - Document if component accepts all aria-* and data-* props (exceptional cases)
   - Use kebab-case for aria attribute documentation (e.g., aria-label)
   - Include prop descriptions in the component's props table if missing

2. Screen Reader Behavior:
   - Document how screen readers announce the component
   - Provide examples with different prop combinations
   - Validate and correct any claims about screen reader announcements

3. Special Cases:
   - Document asComponent prop if available
   - For components with icons, document aria-label requirements
   - Specify when certain aria props are required vs optional