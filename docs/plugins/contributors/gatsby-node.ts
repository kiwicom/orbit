import path from "path";
import fs from "fs-extra";
import type { GatsbyNode } from "gatsby";

const NODE = `contributor`;

// only reads static file generated by cron job and creates nodes

export const sourceNodes = async ({ actions, createContentDigest, createNodeId }) => {
  const { createNode } = actions;
  const staticData = JSON.parse(await fs.readFile(path.join(__dirname, "./users.json"), "utf8"));

  try {
    const users = await fs.readFile(path.join(__dirname, "fetchedUsers.json"), "utf8");

    staticData.concat(JSON.parse(users)).forEach(u => {
      return createNode({
        error: u.error || "",
        avatar_url: u.avatar_url || "",
        ...u,
        core: u.core || false,
        username: u.username || u.id,
        id: createNodeId(u.id),
        parent: null,
        children: [],
        internal: {
          type: NODE,
          content: JSON.stringify(u),
          contentDigest: createContentDigest(u),
        },
      });
    });
  } catch (error) {
    console.error(error);
    console.info(
      "You may have forgotten to include the repo and read:org scopes for your GitHub access token.",
    );
  }
};

export const createSchemaCustomization: GatsbyNode["createSchemaCustomization"] = ({ actions }) => {
  const { createTypes } = actions;

  const typeDefs = `
    type Contributor implements Node {
      id: ID!
      name: String
      info: String
      error: String
      username: String
      position: String
      dribbble: String
      github: String
      avatar_url: String
      twitter: String
      website: String
      active: Boolean
      core: Boolean
    }
  `;

  createTypes(typeDefs);
};
